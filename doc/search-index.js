var searchIndex = JSON.parse('{\
"float_eq":{"doc":"Compare IEEE floating point primitives, structs and …","i":[[8,"FloatEqUlpsEpsilon","float_eq","Per-field tolerances for ULPs comparisons.",null,null],[16,"UlpsEpsilon","","A structurally identical type to <code>Self</code>, with fields …",0,null],[6,"UlpsEpsilon","","Per-field tolerances for ULPs comparisons.",null,null],[8,"FloatEqDebugUlpsDiff","","Per-field results of ULPs based diff calculations.",null,null],[16,"DebugUlpsDiff","","A structurally identical type to <code>Self</code>, with fields …",1,null],[6,"DebugUlpsDiff","","Per-field results of ULPs based diff calculations.",null,null],[8,"FloatEq","","Compare IEEE floating point values for equality using …",null,null],[16,"Epsilon","","Type of the maximum allowed difference between two values …",2,null],[10,"eq_abs","","Check whether <code>self</code> is equal to <code>other</code>, using an absolute …",2,[[],["bool",15]]],[11,"ne_abs","","Check whether <code>self</code> is not equal to <code>other</code>, using an …",2,[[],["bool",15]]],[11,"eq_rel","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_rel","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[10,"eq_rmax","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_rmax","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[10,"eq_rmin","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_rmin","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[10,"eq_r1st","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_r1st","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[10,"eq_r2nd","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_r2nd","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[10,"eq_ulps","","Check whether <code>self</code> is equal to <code>other</code>, using an ULPs …",2,[[["ulpsepsilon",6]],["bool",15]]],[11,"ne_ulps","","Check whether <code>self</code> is not equal to <code>other</code>, using an ULPs …",2,[[["ulpsepsilon",6]],["bool",15]]],[8,"FloatEqAll","","Compare IEEE floating point values for equality using a …",null,null],[16,"AllEpsilon","","Type of the maximum allowed difference between each of …",3,null],[10,"eq_abs_all","","Check whether <code>self</code> is equal to <code>other</code>, using an absolute …",3,[[],["bool",15]]],[11,"ne_abs_all","","Check whether <code>self</code> is not equal to <code>other</code>, using an …",3,[[],["bool",15]]],[11,"eq_rel_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_rel_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[10,"eq_rmax_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_rmax_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[10,"eq_rmin_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_rmin_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[10,"eq_r1st_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_r1st_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[10,"eq_r2nd_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_r2nd_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[10,"eq_ulps_all","","Check whether <code>self</code> is equal to <code>other</code>, using an ULPs …",3,[[["ulpsepsilon",6]],["bool",15]]],[11,"ne_ulps_all","","Check whether <code>self</code> is not equal to <code>other</code>, using an ULPs …",3,[[["ulpsepsilon",6]],["bool",15]]],[8,"AssertFloatEq","","Debug context for when an assert fails.",null,null],[16,"DebugAbsDiff","","The absolute difference between two values, displayed to …",4,null],[16,"DebugEpsilon","","The per-field epsilon value used for comparison between …",4,null],[10,"debug_abs_diff","","Always positive absolute difference between two values.",4,[[]]],[10,"debug_ulps_diff","","Always positive absolute difference between two values in …",4,[[],["debugulpsdiff",6]]],[10,"debug_abs_epsilon","","The epsilon used by an <code>abs</code> absolute tolerance comparison, …",4,[[]]],[11,"debug_rel_epsilon","","The epsilon used by a <code>rel</code> relative tolerance comparison, …",4,[[]]],[10,"debug_rmax_epsilon","","The epsilon used by an <code>rmax</code> relative tolerance comparison…",4,[[]]],[10,"debug_rmin_epsilon","","The epsilon used by an <code>rmin</code> relative tolerance comparison…",4,[[]]],[10,"debug_r1st_epsilon","","The epsilon used by an <code>r1st</code> relative tolerance comparison…",4,[[]]],[10,"debug_r2nd_epsilon","","The epsilon used by an <code>r2nd</code> relative tolerance comparison…",4,[[]]],[10,"debug_ulps_epsilon","","The epsilon used by an <code>ulps</code> ULPs comparison, displayed …",4,[[["ulpsepsilon",6]],["ulpsepsilon",6]]],[8,"AssertFloatEqAll","","Debug context for when an assert using an <code>all</code> check fails.",null,null],[16,"AllDebugEpsilon","","Displayed to the user when an assert fails, using …",5,null],[10,"debug_abs_all_epsilon","","The epsilon used by an <code>abs_all</code> absolute tolerance …",5,[[]]],[11,"debug_rel_all_epsilon","","The epsilon used by a <code>rel_all</code> relative tolerance …",5,[[]]],[10,"debug_rmax_all_epsilon","","The epsilon used by an <code>rmax_all</code> relative tolerance …",5,[[]]],[10,"debug_rmin_all_epsilon","","The epsilon used by an <code>rmin_all</code> relative tolerance …",5,[[]]],[10,"debug_r1st_all_epsilon","","The epsilon used by an <code>r1st_all</code> relative tolerance …",5,[[]]],[10,"debug_r2nd_all_epsilon","","The epsilon used by an <code>r2nd_all</code> relative tolerance …",5,[[]]],[10,"debug_ulps_all_epsilon","","The epsilon used by an <code>ulps_all</code> ULPs comparison, …",5,[[["ulpsepsilon",6]],["ulpsepsilon",6]]],[3,"ComplexUlps","","The absolute difference between two floating point …",null,null],[12,"re","","Real portion of the complex number in ULPs.",6,null],[12,"im","","Imaginary portion of the complex number in ULPs.",6,null],[6,"ComplexUlps32","","[<code>ComplexUlps<T></code>] type matching <code>Complex32</code>.",null,null],[6,"ComplexUlps64","","[<code>ComplexUlps<T></code>] type matching <code>Complex64</code>.",null,null],[23,"derive_float_eq","","Helper for deriving the various float_eq traits.",null,null],[14,"float_eq","","Checks if two floating point expressions are equal to …",null,null],[14,"float_ne","","Checks if two floating point expressions are not equal to …",null,null],[14,"assert_float_eq","","Asserts that two floating point expressions are equal to …",null,null],[14,"assert_float_ne","","Asserts that two floating point expressions are not equal …",null,null],[14,"debug_assert_float_eq","","Asserts that two floating point expressions are equal to …",null,null],[14,"debug_assert_float_ne","","Asserts that two floating point expressions are not equal …",null,null],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"clone","","",6,[[],["complexulps",3]]],[11,"eq","","",6,[[["complexulps",3]],["bool",15]]],[11,"ne","","",6,[[["complexulps",3]],["bool",15]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"ne_abs","","Check whether <code>self</code> is not equal to <code>other</code>, using an …",2,[[],["bool",15]]],[11,"eq_rel","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",2,[[],["bool",15]]],[11,"ne_rel","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[11,"ne_rmax","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[11,"ne_rmin","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[11,"ne_r1st","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[11,"ne_r2nd","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",2,[[],["bool",15]]],[11,"ne_ulps","","Check whether <code>self</code> is not equal to <code>other</code>, using an ULPs …",2,[[["ulpsepsilon",6]],["bool",15]]],[11,"ne_abs_all","","Check whether <code>self</code> is not equal to <code>other</code>, using an …",3,[[],["bool",15]]],[11,"eq_rel_all","","Check whether <code>self</code> is equal to <code>other</code>, using a relative …",3,[[],["bool",15]]],[11,"ne_rel_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[11,"ne_rmax_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[11,"ne_rmin_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[11,"ne_r1st_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[11,"ne_r2nd_all","","Check whether <code>self</code> is not equal to <code>other</code>, using a …",3,[[],["bool",15]]],[11,"ne_ulps_all","","Check whether <code>self</code> is not equal to <code>other</code>, using an ULPs …",3,[[["ulpsepsilon",6]],["bool",15]]],[11,"debug_rel_epsilon","","The epsilon used by a <code>rel</code> relative tolerance comparison, …",4,[[]]],[11,"debug_rel_all_epsilon","","The epsilon used by a <code>rel_all</code> relative tolerance …",5,[[]]],[11,"new","","Create a new ComplexUlps",6,[[]]]],"p":[[8,"FloatEqUlpsEpsilon"],[8,"FloatEqDebugUlpsDiff"],[8,"FloatEq"],[8,"FloatEqAll"],[8,"AssertFloatEq"],[8,"AssertFloatEqAll"],[3,"ComplexUlps"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);